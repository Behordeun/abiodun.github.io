<!DOCTYPE html>
<%
const { default: config } = require('../../../core/config')
const safeQuotes = (str) => str.replace(/"/g, '&quot;')

/*
 * Github
 */
const repositories = config.websites.github.repositories
const repositoriesMore = config.templates.default.github_repositories_more
const canShowMoreRepositories = repositoriesMore && repositoriesMore < repositories.length

function generateRepositoriesHtml(repositories) {
  var output = '';

  for (var i = 0; i < repositories.length; i++) {
    output +=
      `<div>
        <a href="${repositories[i].html_url}" class="repository uk-card uk-card-default uk-card-small uk-card-hover"
            uk-scrollspy="cls: uk-animation-scale-up" target="_blank" rel="noopener">
          <div class="repository__name uk-card-title">${repositories[i].full_name}</div>
          <p class="repository__description">${repositories[i].description || '-'}</p>
          <div class="repository__bottom">
            <div class="repository__bottom__language">
              <span uk-icon="code"></span>
              <span>${repositories[i].language || '-'}</span>
            </div>
            <div class="repository__bottom__star">
              <span uk-icon="star"></span>
              <span>${repositories[i].stargazers_count}</span>
            </div>
            <div class="repository__bottom__forks">
              <span uk-icon="git-fork"></span>
              <span>${repositories[i].forks_count}</span>
            </div>
          </div>
        </a>
      </div>`;
  }

  return output;
}

/*
 * Dribbble
 */
// TODO
%>

<html lang="en" data-template="default" data-compiled="<%= Date.now() %>">
<head>
  <%= require('ejs-loader!@src/parts/head.ejs')() %>
  <style>
    .avatar--image {
      /* TODO Default avatar */
      background: url(<%= config.data.avatar_url %>);
    }
    .background--image {
      background: url(<%= config.templates.default.background || require('@t/default/assets/background.png').default %>);
    }
  </style>
</head>
<body>
<header>
  <div class="header__background uk-background-cover background--image" uk-parallax="bgy: -100"></div>
  <div class="header__wrap">
    <div class="header__wrap__image">
      <div class="avatar--image uk-background-cover"></div>
    </div>
    <h1 class="header__wrap__name uk-h1"><%= `${config.data.first_name} ${config.data.last_name}` %></h1>
    <% if (config.data.position) { %>
      <span class="header__wrap__position"><%= config.data.position %></span>
    <% } %>
    <% if (config.data.links.length > 0) { %>
      <div class="header__wrap__social">
        <% for (const link of config.data.links) { %>
          <a href="<%= link.link %>" title="<%= safeQuotes(link.name) %>" target="_blank" rel="noopener">
            <%= require(`!!svg-inline-loader!@asset/icons/${link.icon}.svg`) %>
          </a>
        <% } %>
      </div>
    <% } %>
  </div>
</header>
<main>
  <% if (repositories.length > 0) { %>
    <section class="repositories-section uk-section uk-section-default">
      <div class="uk-container">
        <h2 class="uk-heading-line">
          <span>
            <span uk-icon="grid"></span>
            <span>Repositories</span>
          </span>
        </h2>
        <div class="repositories uk-child-width-1-3@l uk-child-width-1-2@m uk-grid-small" uk-grid="masonry: true">
          <%= generateRepositoriesHtml(canShowMoreRepositories ? repositories.slice(0, repositoriesMore) : repositories) %>
        </div>
        <% if (canShowMoreRepositories) { %>
          <div class="show-more-wrap">
            <button id="github-more" class="uk-button uk-button-default">Show more</button>
          </div>
        <% } %>
      </div>
    </section>
  <% } %>
</main>
<footer>
  <hr class="uk-divider-icon">
  <span><%= new Date().toLocaleDateString(undefined, {
    year: 'numeric',
    day: '2-digit',
    month: '2-digit'
  }) %></span>
</footer>

<script type="text/javascript">
<% if (canShowMoreRepositories) {%>
  var repositories = <%= JSON.stringify(repositories) %>;
<% } %>

window.addEventListener('DOMContentLoaded', function () {
  <% if (canShowMoreRepositories) { %>
    /*
     * Github
     */
    var btnMoreGithubRepsEl = document.querySelector('#github-more');

    if (btnMoreGithubRepsEl) {
      var sectionGithubRepsEl = document.querySelector('.repositories');
      var per_page = <%= repositoriesMore %>;
      var len = <%= repositories.length %>;
      var page = 1;

      btnMoreGithubRepsEl.addEventListener('click', function () {
        var current = page * per_page;
        var next = current + per_page;
        var html = generateRepositoriesHtml(repositories.slice(current, next));

        var nodes = htmlToElements(html);
        for (var i = 0; i < nodes.length; i++) {
          sectionGithubRepsEl.append(nodes[i]);
        }

        if (len <= next) {
          var showMoreWrapEl = document.querySelector('.repositories-section .show-more-wrap');
          if (showMoreWrapEl) {
            showMoreWrapEl.remove();
          }
        }

        page++;
      });
    }
  <% } %>
});

function htmlToElements(html) {
  var template = document.createElement('template');
  template.innerHTML = html;
  return template.content.childNodes;
}

<%= canShowMoreRepositories ? generateRepositoriesHtml.toString() : '' %>
</script>
</body>
</html>
